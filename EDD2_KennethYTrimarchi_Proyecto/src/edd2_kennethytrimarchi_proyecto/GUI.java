/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edd2_kennethytrimarchi_proyecto;

import com.sun.javafx.property.adapter.PropertyDescriptor;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.CellEditor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.File;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import org.w3c.dom.Text;

/**
 *
 * @author Kenneth Van Yableth
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form TestFrame1
     */
    public GUI() {
        initComponents();
        //Creating temporary or permanent metadata depending on user input.
        metadata = new Metadata();
        //Setting up table default design.
        this.setLocationRelativeTo(null);
        Table.setForeground(Color.BLACK);
        Table.setBackground(Color.WHITE);
        Table.setFont(new Font("", 1, 22));
        Table.setRowHeight(30);
        Table.putClientProperty("terminateEditOnFocusLost", true);
        cleanTable = Table.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jd_CrearRegistroString = new javax.swing.JDialog();
        jLabel11 = new javax.swing.JLabel();
        jl_nombreCampo = new javax.swing.JLabel();
        jt_RegistroString = new javax.swing.JTextField();
        jb_RegresarRegistroString = new javax.swing.JButton();
        jd_BuscarRegistro = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        js_key = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jb_regresarBuscarregistro = new javax.swing.JButton();
        jd_MostrarRegistro = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_infoRegistro = new javax.swing.JTextArea();
        jb_regresarInfoRegistro = new javax.swing.JButton();
        jd_CrearCampo = new javax.swing.JDialog();
        jPanel14 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        tf_NombredelCampo = new javax.swing.JTextField();
        jl_nameCampo = new javax.swing.JLabel();
        jl_tipodevariable = new javax.swing.JLabel();
        rb_tip_string = new javax.swing.JRadioButton();
        rb_tip_integer = new javax.swing.JRadioButton();
        jb_TerminarCreacionCampo = new javax.swing.JButton();
        jb_RegresarDeCrearCampo = new javax.swing.JButton();
        rb_tip_long = new javax.swing.JRadioButton();
        rb_tip_char = new javax.swing.JRadioButton();
        bt_Tipo = new javax.swing.ButtonGroup();
        jd_CrearRegistroInt = new javax.swing.JDialog();
        jLabel12 = new javax.swing.JLabel();
        jl_NombreCampoInt = new javax.swing.JLabel();
        jf_Integer = new javax.swing.JSpinner();
        jb_AceptarRegistroString = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenu3.setText("jMenu3");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Crear Registro");

        jl_nombreCampo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jl_nombreCampo.setText("jLabel12");

        jb_RegresarRegistroString.setText("Aceptar");
        jb_RegresarRegistroString.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_RegresarRegistroStringMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_CrearRegistroStringLayout = new javax.swing.GroupLayout(jd_CrearRegistroString.getContentPane());
        jd_CrearRegistroString.getContentPane().setLayout(jd_CrearRegistroStringLayout);
        jd_CrearRegistroStringLayout.setHorizontalGroup(
            jd_CrearRegistroStringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_CrearRegistroStringLayout.createSequentialGroup()
                .addGroup(jd_CrearRegistroStringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_CrearRegistroStringLayout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(jLabel11))
                    .addGroup(jd_CrearRegistroStringLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jl_nombreCampo)
                        .addGap(30, 30, 30)
                        .addComponent(jt_RegistroString, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(219, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_CrearRegistroStringLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jb_RegresarRegistroString)
                .addGap(71, 71, 71))
        );
        jd_CrearRegistroStringLayout.setVerticalGroup(
            jd_CrearRegistroStringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_CrearRegistroStringLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(79, 79, 79)
                .addGroup(jd_CrearRegistroStringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_nombreCampo)
                    .addComponent(jt_RegistroString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jb_RegresarRegistroString)
                .addGap(35, 35, 35))
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Buscar Registro");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Ingrese la Llave para buscar");

        jButton2.setText("Buscar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jb_regresarBuscarregistro.setText("Regresar");
        jb_regresarBuscarregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarBuscarregistroMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_BuscarRegistroLayout = new javax.swing.GroupLayout(jd_BuscarRegistro.getContentPane());
        jd_BuscarRegistro.getContentPane().setLayout(jd_BuscarRegistroLayout);
        jd_BuscarRegistroLayout.setHorizontalGroup(
            jd_BuscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_BuscarRegistroLayout.createSequentialGroup()
                .addGroup(jd_BuscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_BuscarRegistroLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel7))
                    .addGroup(jd_BuscarRegistroLayout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(js_key, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_BuscarRegistroLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel8)))
                .addContainerGap(200, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_BuscarRegistroLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jb_regresarBuscarregistro)
                .addGap(17, 17, 17))
        );
        jd_BuscarRegistroLayout.setVerticalGroup(
            jd_BuscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_BuscarRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(59, 59, 59)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(js_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jd_BuscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jb_regresarBuscarregistro))
                .addContainerGap())
        );

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Información del Registro");

        ta_infoRegistro.setEditable(false);
        ta_infoRegistro.setColumns(20);
        ta_infoRegistro.setRows(5);
        jScrollPane2.setViewportView(ta_infoRegistro);

        jb_regresarInfoRegistro.setText("Regresar");
        jb_regresarInfoRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarInfoRegistroMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_MostrarRegistroLayout = new javax.swing.GroupLayout(jd_MostrarRegistro.getContentPane());
        jd_MostrarRegistro.getContentPane().setLayout(jd_MostrarRegistroLayout);
        jd_MostrarRegistroLayout.setHorizontalGroup(
            jd_MostrarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_MostrarRegistroLayout.createSequentialGroup()
                .addGroup(jd_MostrarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_MostrarRegistroLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel9))
                    .addGroup(jd_MostrarRegistroLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_MostrarRegistroLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jb_regresarInfoRegistro)
                .addGap(26, 26, 26))
        );
        jd_MostrarRegistroLayout.setVerticalGroup(
            jd_MostrarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_MostrarRegistroLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jb_regresarInfoRegistro)
                .addContainerGap())
        );

        jd_CrearCampo.setBackground(new java.awt.Color(0, 0, 255));
        jd_CrearCampo.setUndecorated(true);

        jPanel14.setBackground(new java.awt.Color(0, 255, 153));
        jPanel14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("CREACIÓN DE CAMPO");

        jl_nameCampo.setText("Nombre del campo:");

        jl_tipodevariable.setText("Tipo de variable:");

        bt_Tipo.add(rb_tip_string);
        rb_tip_string.setText("String");

        bt_Tipo.add(rb_tip_integer);
        rb_tip_integer.setSelected(true);
        rb_tip_integer.setText("Integer");

        jb_TerminarCreacionCampo.setBackground(new java.awt.Color(204, 255, 255));
        jb_TerminarCreacionCampo.setText("Crear Campo");
        jb_TerminarCreacionCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_TerminarCreacionCampoMouseClicked(evt);
            }
        });

        jb_RegresarDeCrearCampo.setBackground(new java.awt.Color(204, 255, 255));
        jb_RegresarDeCrearCampo.setText("Regresar");
        jb_RegresarDeCrearCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_RegresarDeCrearCampoMouseClicked(evt);
            }
        });

        bt_Tipo.add(rb_tip_long);
        rb_tip_long.setText("Long");

        bt_Tipo.add(rb_tip_char);
        rb_tip_char.setText("Char");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jb_RegresarDeCrearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(jb_TerminarCreacionCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel14Layout.createSequentialGroup()
                                    .addComponent(jl_nameCampo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(tf_NombredelCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel14Layout.createSequentialGroup()
                                    .addComponent(jl_tipodevariable, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(rb_tip_integer)
                                        .addComponent(rb_tip_long))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(rb_tip_char)
                                        .addComponent(rb_tip_string)))))))
                .addGap(52, 52, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel10)
                .addGap(50, 50, 50)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_nameCampo)
                    .addComponent(tf_NombredelCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_tipodevariable)
                    .addComponent(rb_tip_string)
                    .addComponent(rb_tip_integer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_tip_long)
                    .addComponent(rb_tip_char))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_RegresarDeCrearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_TerminarCreacionCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout jd_CrearCampoLayout = new javax.swing.GroupLayout(jd_CrearCampo.getContentPane());
        jd_CrearCampo.getContentPane().setLayout(jd_CrearCampoLayout);
        jd_CrearCampoLayout.setHorizontalGroup(
            jd_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_CrearCampoLayout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jd_CrearCampoLayout.setVerticalGroup(
            jd_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Crear Registro");

        jl_NombreCampoInt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jl_NombreCampoInt.setText("jLabel13");

        jb_AceptarRegistroString.setText("Aceptar");
        jb_AceptarRegistroString.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_AceptarRegistroStringMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_CrearRegistroIntLayout = new javax.swing.GroupLayout(jd_CrearRegistroInt.getContentPane());
        jd_CrearRegistroInt.getContentPane().setLayout(jd_CrearRegistroIntLayout);
        jd_CrearRegistroIntLayout.setHorizontalGroup(
            jd_CrearRegistroIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_CrearRegistroIntLayout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addGroup(jd_CrearRegistroIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addGroup(jd_CrearRegistroIntLayout.createSequentialGroup()
                        .addComponent(jl_NombreCampoInt)
                        .addGap(18, 18, 18)
                        .addComponent(jf_Integer, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(249, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_CrearRegistroIntLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jb_AceptarRegistroString)
                .addGap(66, 66, 66))
        );
        jd_CrearRegistroIntLayout.setVerticalGroup(
            jd_CrearRegistroIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_CrearRegistroIntLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel12)
                .addGap(76, 76, 76)
                .addGroup(jd_CrearRegistroIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jl_NombreCampoInt)
                    .addComponent(jf_Integer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jb_AceptarRegistroString)
                .addGap(33, 33, 33))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanel1FocusLost(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 0, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel3.setBackground(new java.awt.Color(0, 204, 204));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Export to Excel");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Special Features");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Beta  Build V 1.96");

        jPanel4.setBackground(new java.awt.Color(0, 204, 204));
        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Export to XML");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(0, 204, 204));
        jPanel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Test Registries");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(0, 204, 204));
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Cruzar Archivo");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(32, 32, 32))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(29, 29, 29))
        );

        jButton1.setBackground(new java.awt.Color(102, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons8_menu_32px.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jScrollPane1.setOpaque(false);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenuBar1.setBorder(null);

        jMenu1.setText("File");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/guardarArchivo24.png"))); // NOI18N
        jMenuItem5.setText("Save");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/loadArchivo24.png"))); // NOI18N
        jMenuItem1.setText("Load");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/newArchivo24.png"))); // NOI18N
        jMenuItem3.setText("New");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/close24.png"))); // NOI18N
        jMenuItem4.setText("Close");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Campos");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/crearCampo24.png"))); // NOI18N
        jMenuItem6.setText("Crear Campo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/modificar Campo24.png"))); // NOI18N
        jMenuItem7.setText("Modificar Campo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/eliminarCampo24.png"))); // NOI18N
        jMenuItem8.setText("Borrar Campo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Listar en consola");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Registros");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/registroInsertar24.png"))); // NOI18N
        jMenuItem10.setText("Crear Registro");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/eliminarRegistro24.png"))); // NOI18N
        jMenuItem11.setText("Borrar Registro");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/buscarRegistro24.png"))); // NOI18N
        jMenuItem12.setText("Buscar Registro");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuItem13.setText("Cruzar Archivo");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Exportar");

        jMenuItem14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/excel24.png"))); // NOI18N
        jMenuItem14.setText("Exportar a Excel");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem14);

        jMenuItem15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd2_kennethytrimarchi_proyecto/icons/xml24.png"))); // NOI18N
        jMenuItem15.setText("Exportar a XML");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem15);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if(file == null || metadata == null)
        {
            System.out.println("No hay ningun archivo abierto!");
        }
        else if(metadata.getNumregistros()>0){
             System.out.println("Ya hay registros creados, no se pueden crear campos!");
        }
        else
        {
            jd_CrearCampo.pack();
            jd_CrearCampo.setModal(true);
            jd_CrearCampo.setLocationRelativeTo(this);
            jd_CrearCampo.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        if (metadata.getNumregistros() == 0 && metadata.getCampos() != null) {
            try {
                if (metadata.getCampos().size() == 0) {

                } else {
                    metodos.ModificarCampos(metadata);
                    BuildTable(metadata, 0);
                }

            } catch (Exception e) {

            }

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Operation");
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        if (metadata.getNumregistros() == 0 && metadata.getCampos() != null) {
            try {
                if (metadata.getCampos().size() == 0) {
                    JOptionPane.showMessageDialog(null, "Invalid Operation");
                } else {
                    metodos.DeleteCampos(metadata);
                    BuildTable(metadata, 0);
                }

            } catch (Exception e) {
                System.out.println("Illegal operation.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Operation");
        }

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        metodos.ListCampos(metadata);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        NewFile();
        llave = false;
        rb_tip_char.setEnabled(false);
        rb_tip_long.setEnabled(false);
        rb_tip_string.setEnabled(false);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        System.out.println("NUM REGISTROS: " + metadata.getNumregistros());
        if (metadata != null) {
            if (metadata.getCampos() != null) {
                if (metadata.getCampos().size() > 0) {
                    if (file == null) {
                        while (FileSuccess == 0) {
                            CreateFile();

                        }
                        
                        try {
                            EscribirMetadatos();
                        } catch (IOException ex) {
                            // ex.printStackTrace();
                            System.out.println("Otro de los mil errores escribiendo metadatas.");
                        }
                        //metadata.addnumregistros();
                        CrearRegistro();
                    } else {
                        if (metadata.getNumregistros() < 1) {
                            try {
                                file.delete();
                                file.createNewFile();
                                System.out.println("Forcing deletion and recreation of the file.");
                            } catch (Exception sdj) {
                                System.out.println("Error en borrar.");
                            }

                            try {
                                EscribirMetadatos();
                            } catch (IOException ex) {
                                //ex.printStackTrace();
                            }
                            metadata.addnumregistros();
                            CrearRegistro();
                        } else {
                            metadata.addnumregistros();
                            CrearRegistro();
                        }

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No hay campos creados! XTT 428");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay campos creados! XTT 431");
            }

        } else {
            JOptionPane.showMessageDialog(null, "No hay campos creados! XTT 435");
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    private void Temp() {

        //Table.
        Table.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {

                    int row = Table.getSelectedRow();
                    int column = Table.getSelectedColumn();

                    // resul is the new value to insert in the DB
                    String resul = Table.getValueAt(row, column).toString();
                    // id is the primary key of my DB
                    String id = Table.getValueAt(row, 0).toString();

                    // update is my method to update. Update needs the id for
                    // the where clausule. resul is the value that will receive
                    // the cell and you need column to tell what to update.
                    System.out.println("Row" + row + "Column" + column);

                }
            }
        });
    }

    private void CrearRegistro() {
        TableModel model = Table.getModel();
        DefaultTableModel modelo = (DefaultTableModel) model;

        Object[] insertarray = new Object[metadata.getCampos().size()];
        /*
        for (int i = 0; i < metadata.getCampos().size(); i++) {
            boolean exito = false;
            while (exito == false) {
                try {
                    String temp = JOptionPane.showInputDialog(null, "Ingrese: " + metadata.getCampos().get(i).toString() + " Tipo: " + metadata.getTipos().get(i).toString());
                    //this.setVisible(false);
                    
                    if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 1) {
                        insertarray[i] = Integer.parseInt(temp);
                    } else if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 2) {
                        insertarray[i] = Long.parseLong(temp);
                    } else if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 3) {
                        insertarray[i] = temp;
                    } else if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 4) {
                        insertarray[i] = temp.charAt(0);
                    }
                    exito = true;
                } catch (Exception e) {
                    System.out.println("Crash Prevented // Create Register Function");
                }
            }

        }*/
        
        /*String formato = "";
                for (int j = 0; j < ((Campos)metadata.getCampos().get(i)).getSize_dec(); j++) {
                    formato+="#";
                }*/
        for (int i = 0; i < metadata.getCampos().size(); i++) {
            if (Integer.parseInt(metadata.getTipos().get(i).toString()) == 1) {
                
                jl_NombreCampoInt.setText(metadata.getCampos().get(i).toString());
                jf_Integer.setValue(0);
                jd_CrearRegistroInt.pack();
                jd_CrearRegistroInt.setModal(true);
                jd_CrearRegistroInt.setLocationRelativeTo(this);
                jd_CrearRegistroInt.setVisible(true);
                int integer = (int) jf_Integer.getValue();
                insertarray[i] = integer;
            }else if(Integer.parseInt(metadata.getTipos().get(i).toString()) == 2){
                jl_NombreCampoInt.setText(metadata.getCampos().get(i).toString());
                jf_Integer.setValue(0);
                jd_CrearRegistroInt.pack();
                jd_CrearRegistroInt.setModal(true);
                jd_CrearRegistroInt.setLocationRelativeTo(this);
                jd_CrearRegistroInt.setVisible(true);
                long N_long = (long) jf_Integer.getValue();
                insertarray[i] = N_long;
            }else if(Integer.parseInt(metadata.getTipos().get(i).toString()) == 3){
                
                jl_nombreCampo.setText(metadata.getCampos().get(i).toString());
                jd_CrearRegistroString.pack();
                jd_CrearRegistroString.setModal(true);
                jd_CrearRegistroString.setLocationRelativeTo(this);
                jd_CrearRegistroString.setVisible(true);
                insertarray[i] = jt_RegistroString.getText();
                
            }else if(Integer.parseInt(metadata.getTipos().get(i).toString()) == 4){
                jl_nombreCampo.setText(metadata.getCampos().get(i).toString());
                jd_CrearRegistroString.pack();
                jd_CrearRegistroString.setModal(true);
                jd_CrearRegistroString.setLocationRelativeTo(this);
                jd_CrearRegistroString.setVisible(true);
                String entrada = jt_RegistroString.getText();
                insertarray[i] = entrada.charAt(0);
            }
            jt_RegistroString.setText("");
            jf_Integer.setValue(0);
        }
        
        ArrayList TrimaExport2 = new ArrayList();

        for (int i = 0; i < insertarray.length; i++) {
            TrimaExport2.add(insertarray[i]);
        }
        //Export to Trima in this line.
        Registro temporal = new Registro(Integer.parseInt(insertarray[0].toString()));

        if (metadata.getArbolB().search(temporal) == null) {
            if (Integer.parseInt(insertarray[0].toString()) > 9999 && Integer.parseInt(insertarray[0].toString()) < 100000) {
                metadata.getArbolB().insert(temporal);
                modelo.addRow(insertarray);
                System.out.println(temporal);
                metadata.addnumregistros();
                try {
                    EscribirDatosRegistro(TrimaExport2);//Send Array to Trima
                    BuscarDatoArchivo(temporal);
                } catch (Exception ex) {
                    //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    // System.out.println(ex);
                    //ex.printStackTrace();
                }
                Table.setModel(modelo);
                System.out.println(metadata.getArbolB().search(temporal));
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese valores entre 9999 y 100,000");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Una Instancia del Registro ya existe.");
        }

        //Temp();
    }
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        SaveFile();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public void SaveFile() {
        JOptionPane.showMessageDialog(null, "Su file se ha guardado exitosamente! ...Always On Saving!");
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        llave = true;
        LoadFile();
        
        if (FileSuccess == 1) {
            metadata = new Metadata();
            BuildTable(metadata, 1);
            try {
                CargarMetadatos();
                BuildTable(metadata, 0);
                LeerDatosRegistro();
            } catch (ClassNotFoundException ex) {
                // Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(metadata.getCampos().get(0));

        } else {

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void LoadFile() {
        FileSuccess = 0;
        String direction;

        //Creo un nuevo JFileChooser para que eliga donde guardar.
        //Le digo que aparezca en el home del proyecto .. Crea un problema que la Metadata se puede guardar en cualquier sitio.
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("./"));
        FileNameExtensionFilter data = new FileNameExtensionFilter("DAT FILE", "dat");
        fileChooser.setFileFilter(data);
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) { //Cuando le da guardar
            //System.out.println(fileChooser.getCurrentDirectory().toString());
            File file = null;
            // FileOutputStream fos = null;
            // ObjectOutputStream ous = null;
            try {
                if (fileChooser.getFileFilter().getDescription().equals("DAT FILE")) { //Chequea si lo que quiere guardar es DAT FILE
                    direction = fileChooser.getSelectedFile().getPath() + ".dat";
                    file = fileChooser.getSelectedFile();
                    this.file = file;
                    JOptionPane.showMessageDialog(null, "Sucess!");
                    System.out.println("Length of Loaded File: " + (file.length() - 4)); //SIZE MENOS BUFFER.
                    FileSuccess = 1;
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to Load. Use DAT FILE.");
                }
                // fos = new FileOutputStream(file);
                //  ous = new ObjectOutputStream(fos);
                //  ous.flush(); //Lo oficializo

                // RAfile=new RandomAccessFile(file,"rw");
            } catch (Exception e) {
                //e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Something Went Wrong! Contact System Administrator.");
            }
            try {
                //ous.close();
                // fos.close();
            } catch (Exception e) {
                //e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Fatal error closing files.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Operation aborted!");
        }
    }


    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        if (mode == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un Registro para borrar.");
        } else {
            try {
                System.out.println("Se eliminara el registro: " + rowRemoval);
                ArrayList ExportTrima3 = new ArrayList();
                for (int i = 0; i < metadata.getCampos().size(); i++) {
                    ExportTrima3.add(Table.getValueAt(rowRemoval, i));
                }
                mode = -1;
                //Exportar a Trima Aqui.
                EliminarDatoArchivo(ExportTrima3);
                System.out.println(metadata.getNumregistros());
                metadata.subtractnumregistros();
                System.out.println("Metadata Registry after deleting: " + metadata.getNumregistros());
                TableModel modelo = Table.getModel();
                DefaultTableModel model = (DefaultTableModel) modelo;
                model.removeRow(rowRemoval);
                Table.setModel(modelo);
            } catch (Exception e) {
                System.out.println("Problem deleting file");
            }

        }

    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        /*try {
            int Primarykey = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese el PrimaryKey del registro a buscar."));
            Registro temporal = new Registro(Primarykey);
            Bnode x;
            //System.out.println("------------");
            if ((x = metadata.getArbolB().search(temporal)) == null) {
                JOptionPane.showMessageDialog(null, "No se pudo encontrar");
                // System.out.println("------------");
            } else {

                Data datos = BuscarDatoArchivo(temporal);
                String info = "Registro: ";
                for (int i = 0; i < datos.datos.size(); i++) {
                    info += datos.datos.get(i) + " - ";
                }
                JOptionPane.showMessageDialog(this, info);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Operation aborted.");
            //e.printStackTrace();
        }*/
        
        this.setVisible(false);
        jd_BuscarRegistro.pack();
        jd_BuscarRegistro.setModal(true);
        jd_BuscarRegistro.setLocationRelativeTo(this);
        jd_BuscarRegistro.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
       try{
        System.out.println("=========================================");
        System.out.println("Imprimiendo en Orden...");
        metadata.ArbolB.traverse();
        System.out.println("Imprimiendo en Forma de Decendencia a 3 Nieveles...");
        metadata.ArbolB.PrintLevels();
        System.out.println("=========================================");
       }catch(Exception e){
           
       }
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        int key = (int) js_key.getValue();
        try {
            
            Registro temporal = new Registro(key);
            Bnode x;
            //System.out.println("------------");
            if ((x = metadata.getArbolB().search(temporal)) == null) {
                JOptionPane.showMessageDialog(jd_BuscarRegistro, "No Se Pudo Encontrar el Registro");
                // System.out.println("------------");
            } else {

                Data datos = BuscarDatoArchivo(temporal);
                String info = "";
                for (int i = 0; i < datos.datos.size(); i++) {
                    info += datos.datos.get(i) + "-";
                }
                
                ta_infoRegistro.setText(info);
                jd_BuscarRegistro.setVisible(false);
                jd_MostrarRegistro.pack();
                jd_MostrarRegistro.setModal(true);
                jd_MostrarRegistro.setLocationRelativeTo(this);
                jd_MostrarRegistro.setVisible(true);

            }
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, "Operation aborted.");
            //e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jb_regresarBuscarregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarBuscarregistroMouseClicked
        jd_BuscarRegistro.dispose();
        this.setVisible(true);
    }//GEN-LAST:event_jb_regresarBuscarregistroMouseClicked

    private void jb_regresarInfoRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarInfoRegistroMouseClicked
        jd_MostrarRegistro.dispose();
        jd_BuscarRegistro.setVisible(true);
    }//GEN-LAST:event_jb_regresarInfoRegistroMouseClicked

    private void jb_TerminarCreacionCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_TerminarCreacionCampoMouseClicked
        String nombre = tf_NombredelCampo.getText();
        int typo=0;
        
        if(rb_tip_integer.isSelected())
        {
            typo = 1;
        }
        if(rb_tip_string.isSelected())
        {
            typo = 2;
        }
        if(rb_tip_long.isSelected())
        {
            typo = 3;
        }
        if(rb_tip_char.isSelected())
        {
            typo = 4;
        }
        
        campo.add(nombre);
        tipo.add(typo);
        
        if(llave == false)
        {
            llave = true;
            rb_tip_char.setEnabled(true);
            rb_tip_long.setEnabled(true);
            rb_tip_string.setEnabled(true);
        }
        
        tf_NombredelCampo.setText("");
        rb_tip_integer.setSelected(true);
    }//GEN-LAST:event_jb_TerminarCreacionCampoMouseClicked

    private void jb_RegresarDeCrearCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_RegresarDeCrearCampoMouseClicked
        tf_NombredelCampo.setText("");
        jd_CrearCampo.dispose();   
        try {
                metodos.CreateCampos(metadata, campo, tipo);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jb_RegresarDeCrearCampoMouseClicked

    private void jPanel1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1FocusLost

    private void TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablePropertyChange
        // TODO add your handling code here:
        try {
            if (Table.isEditing() && tablemodification == 0) {
                mode = -1;
                tablemodification = 1;
                System.out.println("Cell value being edited.");
                CellEditor x = Table.getCellEditor();
                oldcellvalue = Table.getValueAt(Table.getSelectedRow(), Table.getSelectedColumn());
                currentRow = Table.getSelectedRow();
                currentColumn = Table.getSelectedColumn();
                System.out.println("Valor Original:" + oldcellvalue);
                x.addCellEditorListener(new CellEditorListener() {
                    @Override
                    public void editingStopped(ChangeEvent e) { //When editing stops compare original value and type to the new value and type.
                        Object temp = x.getCellEditorValue(); //Extract new value.
                        mode = -1;
                        if (tablemodification == 1) { //Simple bandera.
                            tablemodification = 0; //Making sure bandera resets
                            if (oldcellvalue.toString().equals(temp.toString())) { //If the same value is detected
                                System.out.println("Same Cell Value detected: " + oldcellvalue); // Dont change anything
                                System.out.println("No export Requiered.");
                            } else { // If new value is detected:
                                System.out.println("Different Cell Value Detected:" + temp);
                                System.out.println("Column: " + currentColumn);
                                //DefaultTableModel temasdasd = Table.getModel();
                                int type = Integer.parseInt(metadata.getTipos().get(currentColumn).toString()); //Extract the type of the value from metadata that it should have.
                                try { // Attempt to convert it to see if it is workable.

                                    Object assignation = null; //Basicamente solo es para que ocurra la exception validadora pero no hace nada.
                                    if (type == 1) {
                                        assignation = Integer.parseInt(temp.toString());
                                    } else if (type == 2) {
                                        assignation = Long.parseLong(temp.toString());
                                    } else if (type == 3) {
                                        assignation = temp.toString();
                                    } else if (type == 4) {
                                        assignation = temp.toString().charAt(0);
                                    }
                                    ArrayList TrimaExport = new ArrayList(); //ArrayList que se le manda a Trimarchi cuando se detecta un cambio en el registro.
                                    for (int i = 0; i < metadata.getCampos().size(); i++) {
                                        if (i == currentColumn) {
                                            TrimaExport.add(assignation);
                                        } else {
                                            TrimaExport.add(Table.getValueAt(currentRow, i));

                                        }

                                    }
                                    System.out.println("########################################################");
                                    System.out.println("Exportar a Trima valores: " + TrimaExport);
                                    //Apartir de aqui se exporta el nuevo valor del registro. AKA TrimaExport.
                                    //Export to Trima Here.
                                    if (currentColumn == 0) {
                                        JOptionPane.showMessageDialog(null, " No se puede modificar la primary key");
                                        Table.setValueAt(oldcellvalue, currentRow, currentColumn);
                                    } else {
                                        ModificarDatoArchivo(TrimaExport);//Exportando A Metodo Trima
                                    }

                                } catch (Exception exc) { //If it fails to convert then replace new value with old value.
                                    Table.setValueAt(oldcellvalue, currentRow, currentColumn);
                                    JOptionPane.showMessageDialog(null, "Incompatible data type. Original value was set.");
                                }

                            }

                        } //End if of modification bandera.

                    }

                    @Override
                    public void editingCanceled(ChangeEvent e) {

                    }
                });

                x.removeCellEditorListener(Table);

                /*tablemodification = 1;
                currentRow = Table.getEditingRow();
                currentColumn = Table.getEditingColumn();
                oldcellvalue = Table.getValueAt(currentRow, currentColumn).toString();
                System.out.println("Original Value: " + oldcellvalue);*/
            }
        } catch (Exception e) {
            System.out.println("FATAL ERROR. Expect Table Failures");
        }

        /*else if (tablemodification == 1) {
            tablemodification = 0;
            if (currentRow == Table.getSelectedRow() && currentColumn == Table.getSelectedColumn()) {
                if (oldcellvalue != Table.getValueAt(currentRow, currentColumn).toString()) {
                    System.out.println("Different Cell value detected.");
                } else {
                    System.out.println("Same Cell value detected.");
                }
                System.out.println("Cell value finished editing.");
            }

        }*/
    }//GEN-LAST:event_TablePropertyChange

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        System.out.println("TOUCHING AUFHAKJDFA;KDHFA;DHFKAJHSDFKAHDFKJAHDFAJDFH");
        rowRemoval = Table.getSelectedRow();
        mode = 0;
        System.out.println("Removal on:" + rowRemoval);
    }//GEN-LAST:event_TableMouseClicked

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:\
        /*
        int Row = Table.getEditingRow();
        int Column = Table.getEditingColumn();
        System.out.println("Row:"+Row);
        System.out.println("Column:"+Column);*/
    }//GEN-LAST:event_TableFocusLost

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        /*
        // TODO add your handling code here:
        if (file == null || metadata == null) {
            JOptionPane.showMessageDialog(null, "No hay ningun file cargado");
        } else {
            if (metadata.getCampos() == null) {
                JOptionPane.showMessageDialog(null, "No hay informacion definida.");
            } else {
                JTable tablavieja = (JTable) Table;
                Metadata vieja = (Metadata) metadata;

                AvailList = new DLL();
                RAfile = null;
                //Metadata temporal = new Metadata();
                //temporal = metadata;
                LoadFile();
                if (FileSuccess == 1) {

                    metadata = new Metadata();
                    BuildTable(metadata, 1);
                    try {
                        CargarMetadatos();
                        BuildTable(metadata, 0);
                        LeerDatosRegistro();
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    // Comparar ahora los campos de ambas metadatas.
                    if (metadata.getCampos().size() == vieja.getCampos().size()) {
                        boolean compatible = true;
                        int camposmax = metadata.getCampos().size();
                        for (int i = 0; i < camposmax; i++) {
                            int value1 = Integer.parseInt(metadata.getTipos().get(i).toString());
                            int value2 = Integer.parseInt(vieja.getTipos().get(i).toString());
                            if (value1 == value2) {

                            } else {
                                System.out.println("Valor Incompatible i:" + value1 + "Valor Incompatible2:" + value2);
                                compatible = false;
                            }

                        }
                        if (compatible) {
                            System.out.println(metadata);
                            System.out.println(vieja);
                            TableModel modelviejo = tablavieja.getModel();
                            DefaultTableModel modeloviejo = (DefaultTableModel) modelviejo;
                            TableModel model = Table.getModel();
                            DefaultTableModel modelo = (DefaultTableModel) model;
                            for (int i = 0; i < tablavieja.getRowCount(); i++) {
                                int numactualr = Integer.parseInt(modeloviejo.getValueAt(i, 0).toString());
                                int superes = Integer.parseInt(Table.getValueAt(i, 0).toString());
                                System.out.println("nUM ACTUAk" + numactualr + "Ps" + superes);
                                Registro trabajando = new Registro(numactualr);
                                if (metadata.getArbolB().search(trabajando) == null) {
                                    if (numactualr > 9999 && numactualr < 100000) {
                                        metadata.getArbolB().insert(trabajando);
                                        ArrayList superrow = new ArrayList();
                                        for (int j = 0; j < vieja.getCampos().size(); j++) {
                                            superrow.add(tablavieja.getValueAt(i, j));
                                        }

                                        modelo.addRow(superrow.toArray());
                                        System.out.println(trabajando);
                                        metadata.addnumregistros();
                                        try {
                                            EscribirDatosRegistro(superrow);//Send Array to Trima
                                            BuscarDatoArchivo(trabajando);
                                        } catch (Exception ex) {
                                            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                            System.out.println(ex);
                                            ex.printStackTrace();
                                        }
                                        Table.setModel(modelo);
                                        System.out.println(metadata.getArbolB().search(trabajando));
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Dato Incompatible pertenece a primary key " + numactualr);

                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Dato Ya existe!");
                                    // System.out.println(metadata.getArbolB().search(trabajando));
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Metadatas no compatibles por tipo");

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Metadatas no compatibles por tamaño de campos");
                        JOptionPane.showMessageDialog(null, "Se cargara el segundo archivo seleccionado.");
                    }
                }
            }
        }
        */
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        // TODO add your handling code here:
        if (developermode == 1) {
            if (metadata != null) {
                if (metadata.getCampos() != null) {
                    if (metadata.getCampos().size() > 0) {
                        if (file == null) {
                            JOptionPane.showMessageDialog(null, "ERROR 404: Please make sure file and campos have been defined. Or a saving destination has been established");
                        } else {
                            System.out.println("TestRegistries SuperCampos:" + metadata.getNumregistros());
                            if (metadata.getNumregistros() < 1) {
                                try {
                                    file.delete();
                                    file.createNewFile();
                                    System.out.println("Forcing deletion and recreation of the file.");
                                } catch (Exception sdj) {
                                    //System.out.println("Error en la puteria de borrar.");
                                }
                                //metadata.addnumregistros();
                                try {
                                    EscribirMetadatos();
                                } catch (IOException ex) {
                                    //ex.printStackTrace();
                                }
                                //CrearRegistro();
                                try {
                                    for (int i = 10000; i < 10021; i++) {
                                        ArrayList registro = new ArrayList();
                                        registro.add(i);

                                        for (int j = 1; j < metadata.getCampos().size(); j++) {
                                            if (metadata.getTipos().get(j).toString().equals(Integer.toString(1))) {
                                                registro.add(j);
                                            } else if (metadata.getTipos().get(j).toString().equals(Integer.toString(2))) {
                                                long x = j;
                                                registro.add(x);
                                            } else if (metadata.getTipos().get(j).toString().equals(Integer.toString(3))) {
                                                registro.add("Andrea Mendoza");
                                            } else {
                                                registro.add("F");
                                            }
                                        }
                                        Registro xasda = new Registro(i);
                                        metadata.getArbolB().insert(xasda);
                                        metadata.addnumregistros();
                                        TableModel x = Table.getModel();
                                        DefaultTableModel model = (DefaultTableModel) x;
                                        model.addRow(registro.toArray());
                                        try {
                                            EscribirDatosRegistro(registro);//Send Array to Trima
                                            BuscarDatoArchivo(xasda);
                                        } catch (Exception ex) {
                                            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                            // System.out.println(ex);
                                        }
                                        Table.setModel(x);
                                    }
                                } catch (Exception e) {
                                    // e.printStackTrace();
                                }

                            } else {
                                // metadata.addnumregistros();
                                //CrearRegistro();
                                JOptionPane.showMessageDialog(null, "Deben haber exactamente 0 registros en el gui.");
                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Super User features have been disabled by creator.");
        }

    }//GEN-LAST:event_jPanel5MouseClicked

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        // TODO add your handling code here:
        try {
            if (file == null || metadata == null || metadata.getCampos() == null || metadata.getNumregistros() == 0) {
                JOptionPane.showMessageDialog(null, "No hay informacion cargada");
            } else {
                String name = JOptionPane.showInputDialog(null, "Ingrese el nombre del exporte: ");
                ArrayList registrost = new ArrayList();

                for (int i = 0; i < Table.getRowCount(); i++) {
                    ArrayList row = new ArrayList();
                    for (int j = 0; j < Table.getColumnCount(); j++) {
                        row.add(Table.getValueAt(i, j));
                    }
                    registrost.add(row);
                }
                exportXML(metadata.getCampos(), registrost, name);
            }

        } catch (Exception e) {
            System.out.println("Could not export successfully");
        }

    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
        try {
            if (file == null || metadata == null || metadata.getCampos() == null || metadata.getNumregistros() == 0) {
                JOptionPane.showMessageDialog(null, "No hay informacion cargada");
            } else {
                String name = JOptionPane.showInputDialog(null, "Ingrese el nombre del exporte: ");
                metodos.ExportToExcel(metadata, name, Table);
            }

        } catch (Exception e) {
            System.out.println("Error Fatal.");
        }

        //metodos.ExportToExcel();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        int posicion = jButton1.getX();
        //System.out.println(posicion);
        if (posicion > 5) {
            //Al metiche que este leyendo esto por favor salir de aqui.

            //Animacion.Animacion.mover_izquierda(posicion, num, ERROR,DELAY, rootPane);
            jScrollPane1.setSize(817, 499);
            jScrollPane1.updateUI();
            //System.out.println(posicion2);
        } else {
            //Metiche favor deja de leer

            jScrollPane1.setSize(619, 499);
            jScrollPane1.updateUI();
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:
        try {
            if (file == null || metadata == null || metadata.getCampos() == null || metadata.getNumregistros() == 0) {
                JOptionPane.showMessageDialog(null, "No hay informacion cargada");
            } else {
                String name = JOptionPane.showInputDialog(null, "Ingrese el nombre del exporte: ");
                metodos.ExportToExcel(metadata, name, Table);
            }

        } catch (Exception e) {
            System.out.println("Error Fatal.");
        }

    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
        try {
            if (file == null || metadata == null || metadata.getCampos() == null || metadata.getNumregistros() == 0) {
                JOptionPane.showMessageDialog(null, "No hay informacion cargada");
            } else {
                String name = JOptionPane.showInputDialog(null, "Ingrese el nombre del exporte: ");
                ArrayList registrost = new ArrayList();

                for (int i = 0; i < Table.getRowCount(); i++) {
                    ArrayList row = new ArrayList();
                    for (int j = 0; j < Table.getColumnCount(); j++) {
                        row.add(Table.getValueAt(i, j));
                    }
                    registrost.add(row);
                }
                exportXML(metadata.getCampos(), registrost, name);
            }

        } catch (Exception e) {
            System.out.println("Could not export successfully");
        }
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        
        // TODO add your handling code here:
        if (file == null || metadata == null) {
            JOptionPane.showMessageDialog(null, "No hay ningun file cargado");
        } else {
            if (metadata.getCampos() == null) {
                JOptionPane.showMessageDialog(null, "No hay informacion definida.");
            } else {
                JTable tablavieja = (JTable) Table;
                Metadata vieja = (Metadata) metadata;

                AvailList = new DLL();
                RAfile = null;
                //Metadata temporal = new Metadata();
                //temporal = metadata;
                LoadFile();
                if (FileSuccess == 1) {

                    metadata = new Metadata();
                    BuildTable(metadata, 1);
                    try {
                        CargarMetadatos();
                        BuildTable(metadata, 0);
                        LeerDatosRegistro();
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    // Comparar ahora los campos de ambas metadatas.
                    if (metadata.getCampos().size() == vieja.getCampos().size()) {
                        boolean compatible = true;
                        int camposmax = metadata.getCampos().size();
                        for (int i = 0; i < camposmax; i++) {
                            int value1 = Integer.parseInt(metadata.getTipos().get(i).toString());
                            int value2 = Integer.parseInt(vieja.getTipos().get(i).toString());
                            if (value1 == value2) {

                            } else {
                                System.out.println("Valor Incompatible i:" + value1 + "Valor Incompatible2:" + value2);
                                compatible = false;
                            }

                        }
                        if (compatible) {
                            System.out.println(metadata);
                            System.out.println(vieja);
                            TableModel modelviejo = tablavieja.getModel();
                            DefaultTableModel modeloviejo = (DefaultTableModel) modelviejo;
                            TableModel model = Table.getModel();
                            DefaultTableModel modelo = (DefaultTableModel) model;
                            for (int i = 0; i < tablavieja.getRowCount(); i++) {
                                int numactualr = Integer.parseInt(modeloviejo.getValueAt(i, 0).toString());
                                int superes = Integer.parseInt(Table.getValueAt(i, 0).toString());
                                System.out.println("nUM ACTUAk" + numactualr + "Ps" + superes);
                                Registro trabajando = new Registro(numactualr);
                                if (metadata.getArbolB().search(trabajando) == null) {
                                    if (numactualr > 9999 && numactualr < 100000) {
                                        metadata.getArbolB().insert(trabajando);
                                        ArrayList superrow = new ArrayList();
                                        for (int j = 0; j < vieja.getCampos().size(); j++) {
                                            superrow.add(tablavieja.getValueAt(i, j));
                                        }

                                        modelo.addRow(superrow.toArray());
                                        System.out.println(trabajando);
                                        metadata.addnumregistros();
                                        try {
                                            EscribirDatosRegistro(superrow);//Send Array to Trima
                                            BuscarDatoArchivo(trabajando);
                                        } catch (Exception ex) {
                                            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                            System.out.println(ex);
                                            ex.printStackTrace();
                                        }
                                        Table.setModel(modelo);
                                        System.out.println(metadata.getArbolB().search(trabajando));
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Dato Incompatible pertenece a primary key " + numactualr);

                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Dato Ya existe!");
                                    // System.out.println(metadata.getArbolB().search(trabajando));
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Metadatas no compatibles por tipo");

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Metadatas no compatibles por tamaño de campos");
                        JOptionPane.showMessageDialog(null, "Se cargara el segundo archivo seleccionado.");
                    }
                }
            }
        }
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jb_RegresarRegistroStringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_RegresarRegistroStringMouseClicked
        jd_CrearRegistroString.dispose();
    }//GEN-LAST:event_jb_RegresarRegistroStringMouseClicked

    private void jb_AceptarRegistroStringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_AceptarRegistroStringMouseClicked
        jd_CrearRegistroInt.dispose();
    }//GEN-LAST:event_jb_AceptarRegistroStringMouseClicked
    public static void exportXML(ArrayList Campos, ArrayList Regs, String Direccion) {
        Document document = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            document = implementation.createDocument(null, "xml", null);
            //Arraylist de campos

            for (int i = 0; i < Regs.size(); i++) {
                Element registro = document.createElement("Registro" + i);
                document.getDocumentElement().appendChild(registro);
                ArrayList<Element> elementos = new ArrayList();

                for (int j = 0; j < Campos.size(); j++) { //Llenando arraylist de elementos campos
                    Element campos = document.createElement(Campos.get(j).toString());
                    elementos.add(campos);
                }

                for (int h = 0; h < elementos.size(); h++) {
                    registro.appendChild(elementos.get(h));
                    Text valorCampo = document.createTextNode(Regs.get(h).toString());
                    elementos.get(h).appendChild(valorCampo);
                    document.setXmlVersion("1.0");

                }
            }
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();

            // Archivo donde almacenaremos el XML
            File archivo = new File(Direccion + ".xml");

            // Fuente de datos, en este caso el documento XML
            DOMSource source = new DOMSource(document);
            // Resultado, el cual almacena en el archivo indicado
            StreamResult result = new StreamResult(archivo);
            // Transformamos de ña fuente DOM a el resultado, lo que almacena todo en el archivo
            transformer.transform(source, result);
            //System.out.println("Ended");
        } catch (Exception e) {
            // Logger.getLogger(TreeTest2.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("COULD NOT EXPORT PROBABLY DIRTY EXPORTER STRING.");

        }
    }

    private void BuildTable(Metadata metadata, int funcion) {
        if (funcion == 0) { //Instruction 0 lets the Table Builder know it should only change headers.
            Object[] campos = metadata.getCampos().toArray();
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.setColumnCount(campos.length);

            tabla.setColumnIdentifiers(campos);
            Table.setModel(tabla);
            //Table.updateUI();
        } else if (funcion == 1) { //Instruction 1 lets the Table Builder clean all models loaded.
            Table.setModel(cleanTable);
        }

    }

    private void TableInsertRegistro() {
        TableModel model = Table.getModel();
        DefaultTableModel modelo = (DefaultTableModel) model;
        metadata.addnumregistros();

        Object insertArray[] = KennethExport2.toArray();

        modelo.addRow(insertArray);

        Table.setModel(model);

    }

    private void CreateFile() {
        //Borro lo que tengo en la metadata
        //metadata = new Metadata();
        //Le digo a la tabla que se borre.
        //BuildTable(metadata, 1);
        //OUTPUT TESTS ----- IGNORE

        // Output Tests ------ IGNORE.
        FileSuccess = 0;
        String direction;
        //Creo un nuevo JFileChooser para que eliga donde guardar.
        //Le digo que aparezca en el home del proyecto .. Crea un problema que la Metadata se puede guardar en cualquier sitio.
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("./"));
        FileNameExtensionFilter data = new FileNameExtensionFilter("DAT FILE", "dat");
        fileChooser.setFileFilter(data);
        int seleccion = fileChooser.showSaveDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) { //Cuando le da guardar
            //System.out.println(fileChooser.getCurrentDirectory().toString());
            File file = null;
            FileOutputStream fos = null;
            ObjectOutputStream ous = null;
            try {
                if (fileChooser.getFileFilter().getDescription().equals("DAT FILE")) { //Chequea si lo que quiere guardar es DAT FILE
                    direction = fileChooser.getSelectedFile().getPath().toString() + ".dat";
                    System.out.println(direction);
                    direction = direction.replace(".dat", "");
                    System.out.println(direction);
                    direction += ".dat";
                    System.out.println(direction);
                    file = new File(direction);
                    if (file.length() == 0) { //Revisa que este vacio.                    
                        this.file = new File(direction);
                        JOptionPane.showMessageDialog(this, "Success!\n All unsaved progress was Lost!");

                    } else if (file.exists()) { //Si ya existe entonces lo vuelve a crear. PERO VACIO.
                        file.delete();
                        file.createNewFile();
                        this.file = new File(direction);
                        JOptionPane.showMessageDialog(this, "File OverWritten, New Length: " + file.length());
                    }
                    FileSuccess = 1;
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to save. Use DAT FILE.");
                }
                fos = new FileOutputStream(file);
                ous = new ObjectOutputStream(fos);
                ous.flush(); //Lo oficializo

                System.out.println("FILE LENGTH: " + (file.length() - 4)); //SIZE MENOS BUFFER.

                // RAfile=new RandomAccessFile(file,"rw");
            } catch (Exception e) {
                //e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Something Went Wrong! Contact System Administrator.");
            }
            try {
                ous.close();
                fos.close();
            } catch (Exception e) {
                //e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Fatal error closing files.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Operation aborted!");
        }
        //End of FileChooserIf 
    }

    private void NewFile() {
        // Protocolo de creacion de Metadata. 
        // SE LE ADVIERTE AL USUARIO QUE INFORMACION ACTUAL SERA BORRADA.
        // 1. Se le pide el nombre de la metadata al usuario.
        // 2. Se crea Metadata.
        String direction; // Nombre del archivo .dat que se creara/
        int option = JOptionPane.showConfirmDialog(this, "Do you want to save your current progress?");
        if (option == JOptionPane.NO_OPTION) { //Si no quiere guardar lo que hizo.
            CreateFile(); //Como no quiere guardar solo lo creo.
            if (FileSuccess == 1) {
                metadata = new Metadata();
                BuildTable(metadata, 1);
            }

        } else if (option == JOptionPane.YES_OPTION) {
            SaveFile();
            //una vez se guarda la info se crea el archivo.
            //CreateFile();

        } else {
            System.out.println("Operation cancelled");
        }
    }

    public void CargarMetadatos() throws ClassNotFoundException {
        try {
            // System.out.println("????????????????");
            RAfile = new RandomAccessFile(file, "rw");
            int tamaño = RAfile.readInt();
            //System.out.println(tamaño + " SIZEEEEEEEE");
            byte[] data = new byte[tamaño];
            RAfile.read(data);
            ByteArrayInputStream in = new ByteArrayInputStream(data);
            ObjectInputStream read = new ObjectInputStream(in);
            metadata = (Metadata) read.readObject();//read the byte array
            metadata.setSizeMeta(tamaño);
        } catch (IOException ex) {
            // Logger.getLogger(Trima.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void EscribirMetadatos() throws IOException {
        RAfile = new RandomAccessFile(file, "rw");
        ByteArrayOutputStream obArray = new ByteArrayOutputStream();
        ObjectOutputStream objeto = new ObjectOutputStream(obArray);
        objeto.writeObject(metadata);
        byte[] datos = obArray.toByteArray();//makes an array of bytes from the object
        RAfile.seek(0);//Place pointe at the beggining of the file
        RAfile.writeInt(datos.length);
        RAfile.write(datos);
        //RAfile.setLength(7500);
        metadata.setSizeMeta((int) RAfile.length());
        System.out.println("ESTE ES EL SIZE DE LOS METADATOS..." + datos.length);

    }

    public void EscribirDatosRegistro(ArrayList<Object> info_registro) {

        try {
            System.out.println("=========================================");
            if (AvailList.head != null) {
                System.out.println("EL AVAILIST TIENE DATOS!!! VER SI ENCUENTRA CUPO....");
                Data datos = new Data();
                Registro temporal = new Registro(Integer.parseInt(info_registro.get(0).toString()));
                long byteOffset = RAfile.length();
                System.out.println("ByteOffset:: " + byteOffset);
                Bnode d = metadata.getArbolB().search(temporal);
                int x = searchEnNodo(d, temporal.getKey());

                d.key[x].setByteOffset(byteOffset);
                datos.setDatos(info_registro);//Alistando para guardar arraylist de objetos en el archivo
                datos.setUbicacion(byteOffset);//clase datos que guarda ubiacion

                ByteArrayOutputStream obArray = new ByteArrayOutputStream();
                ObjectOutputStream objeto = new ObjectOutputStream(obArray);
                objeto.writeObject(datos);

                byte[] dat = obArray.toByteArray();
                int required_size = dat.length;
                DLL.Node espacio = AvailList.SearchSpace(required_size);
                if (espacio == null) {
                    System.out.println("NO ENCONTRO ESPACIO, NO CABE");
                    RAfile.seek(byteOffset);//Place pointe at the beggining of the file
                    RAfile.writeInt(dat.length);
                    RAfile.write(dat);
                } else {
                    System.out.println("SI ENCONTROO ESPACIO!!! ENTRO");
                    //System.out.println("Esta es la POSICION: " + espacio.posicion);
                    datos.setUbicacion(espacio.posicion);
                    System.out.println("Espacio encontrado: " + espacio.data + " ----- Tamaño del Registro a Insertar: " + dat.length);
                    int j = 0;
                    for (int i = 0; i < (espacio.data - dat.length); i++) {//El for lo que hace es meter caracteres para igualar los size de ambos
                        datos.setSize_alter(datos.getSize_alter() + "|");
                        //System.out.print("ENTRO Cuantas Veces??");
                        j++;
                    }

                    obArray = new ByteArrayOutputStream();
                    objeto = new ObjectOutputStream(obArray);
                    objeto.writeObject(datos);
                    dat = obArray.toByteArray();
                    d.key[x].setByteOffset(datos.ubicacion);
                    System.out.println("Espacio Size: " + espacio.data + "--- New Size: " + dat.length);
                    System.out.println("    Esta es la Ubicacion..... " + datos.ubicacion);

                    RAfile.seek(datos.ubicacion);
                    RAfile.writeInt(dat.length);
                    RAfile.write(dat);
                    AvailList.deleteNode(AvailList.head, espacio);
                }
            } else {
                System.out.println("EL AVAILLIST ESTA VACIO ENTONCES INGRESA NORMAL");
                Data datos = new Data();
                Registro temporal = new Registro(Integer.parseInt(info_registro.get(0).toString()));
                long byteOffset = RAfile.length();
                System.out.println("ByteOffset:: " + byteOffset);
                Bnode d = metadata.getArbolB().search(temporal);
                int x = searchEnNodo(d, temporal.getKey());

                d.key[x].setByteOffset(byteOffset);
                datos.setDatos(info_registro);//Alistando para guardar arraylist de objetos en el archivo
                datos.setUbicacion(byteOffset);//clase datos que guarda ubiacion

                ByteArrayOutputStream obArray = new ByteArrayOutputStream();
                ObjectOutputStream objeto = new ObjectOutputStream(obArray);
                objeto.writeObject(datos);
                byte[] dat = obArray.toByteArray();//makes an array of bytes from the object
                RAfile.seek(byteOffset);//Place pointe at the beggining of the file
                RAfile.writeInt(dat.length);
                RAfile.write(dat);
                System.out.println("ESTE ES EL SIZE DEL REGISTRO..." + dat.length);
            }

        } catch (IOException | NumberFormatException ex) {
            // System.out.println("Tiene errrrrrrrroooooooooooooooor");
            //ex.printStackTrace();
        }

    }

    public void LeerDatosRegistro() throws ClassNotFoundException {
        try {//Este metodo quedara available cuando Se habilite la fncion Load File
            System.out.println("=========================================");
            System.out.println("Cargando Registros a la Table");

            RAfile = new RandomAccessFile(file, "rw");
            RAfile.seek(0);
            int tamaño = RAfile.readInt();
            RAfile.seek(tamaño + 4);
            //System.out.println(tamaño);
            boolean eliminado = false;//boolen que marca que el registro leido esta eliminado
            while (RAfile.getFilePointer() < RAfile.length()) {
                System.out.println("----------------------------------------------");
                eliminado = false;
                tamaño = RAfile.readInt();
                System.out.println("New Tamaño: " + tamaño);
                byte[] data = new byte[tamaño];
                RAfile.read(data);
                ByteArrayInputStream in = new ByteArrayInputStream(data);
                ObjectInputStream read = new ObjectInputStream(in);
                Data d = (Data) read.readObject();//guardo el array de bytes en una variable temporal
                if (d.getSize_alter().contains("*")) {//If que verifica que si el registro esta eliminado
                    eliminado = true;//si entra significa que si
                    System.out.println("ENCONTRO EL REGISTRO BORRADO... " + d.getDatos().get(1) + " Ubicacion...." + d.getUbicacion());
                    AvailList.BestFit(tamaño, d.ubicacion);

                } else {//entra al else cuando NO ETSA ELIMINADO
                    KennethExport2 = new ArrayList<>();
                    Registro temporal = new Registro(d.getKey());
                    temporal.setByteOffset(d.getUbicacion());
                    metadata.getArbolB().insert(temporal);
                    System.out.println("SE VA A METER A: " + d.getDatos().get(1) + " Ubicacion: " + d.getUbicacion());
                    for (int i = 0; i < d.getDatos().size(); i++) {
                        KennethExport2.add(d.getDatos().get(i));

                    }
                    TableInsertRegistro();//Inserto en la tabla

//Agrego un registro con el mismo formato que me fue enviado para implementarlo en la table
                    //Arraylist Lista para agarrar Registros
                    //GRAB Global Array!!!! XD 
                }

            }
            metadata.ArbolB.traverse();
            metadata.ArbolB.PrintLevels();
        } catch (IOException ex) {
            //ex.printStackTrace();
            //System.out.println("ERrrrrrrrrrrrrrrrrrrrrrrrrrrrrrroooooooooooooooooorr");
        }
    }

    public Data BuscarDatoArchivo(Registro r) throws IOException, ClassNotFoundException {//Metodo para Buscar El Registro en el Archivo
        if (metadata.getArbolB().search(r) != null) {//Solo uso la key del Arbol y lo pido de forma constante al Randomaccesfile
            Bnode contenido = metadata.getArbolB().search(r);
            int pos = searchEnNodo(contenido, r.getKey());
            long byteOffset = contenido.key[pos].byteOffset;
            RAfile.seek(byteOffset);
            int tamaño = RAfile.readInt();
            byte[] data = new byte[tamaño];
            RAfile.read(data);
            ByteArrayInputStream in = new ByteArrayInputStream(data);
            ObjectInputStream read = new ObjectInputStream(in);
            Data d = (Data) read.readObject();//guardo el array de bytes en una variable temporal

            return d;
        } else {
            System.out.println("No se encontro el Nodo");

            return null;
        }

    }

    public void EliminarDatoArchivo(ArrayList<Object> TrimaExport) {

        try {
            Registro temporal = new Registro(Integer.parseInt(TrimaExport.get(0).toString()));
            if (BuscarDatoArchivo(temporal) != null) {
                System.out.println("===========================================================");
                System.out.println("ELIMANDO NODO...");
                Data temp = BuscarDatoArchivo(temporal);
                RAfile.seek(temp.ubicacion);
                int size_act = RAfile.readInt();//Este es el tamaño actual
                temp.setSize_alter("*"); //Pone un aterisco que marca ese registro o dato como eliminado
                temp.size_alter = "*";
                Bnode b = metadata.ArbolB.search(temporal);
                int pos = searchEnNodo(b, temporal.key);
                long ubicacion = b.key[pos].getByteOffset();
                temp.ubicacion = ubicacion;

                ByteArrayOutputStream obArray = new ByteArrayOutputStream();
                ObjectOutputStream objeto = new ObjectOutputStream(obArray);

                obArray = new ByteArrayOutputStream();
                objeto = new ObjectOutputStream(obArray);
                objeto.writeObject(temp);

                byte[] dat2 = obArray.toByteArray();
                System.out.println(temp.size_alter + " ----------------------------" + temp.ubicacion);
                RAfile.write(dat2);

                System.out.println("LLamar metodo del AvailList...");
                AvailList.BestFit(size_act, temp.ubicacion);
                AvailList.ImprimeListaEnlazada(AvailList.head);
                System.out.println("Antes de Borrar el Registro...." + metadata.ArbolB.search(temporal));
                metadata.ArbolB.remove(temporal);
                System.out.println("Despues de Borrar el Registro...." + metadata.ArbolB.search(temporal));
                System.out.println("===========================================================");
                //Avai

            }
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }

    public void ModificarDatoArchivo(ArrayList<Object> TrimaExport) {
        try {
            Registro temporal = new Registro(Integer.parseInt(TrimaExport.get(0).toString()));
            if (BuscarDatoArchivo(temporal) != null) {
                System.out.println("===========================================================");
                System.out.println("MODIFICANDO NODO...");
                Data temp = BuscarDatoArchivo(temporal);
                temporal.setByteOffset(temp.ubicacion);
                RAfile.seek(temp.ubicacion);
                int size_act = RAfile.readInt();//Este es el tamaño actual

                Data new_size = new Data();
                new_size.setKey((int) TrimaExport.get(0));
                new_size.setDatos(TrimaExport);
                new_size.setUbicacion(temp.getUbicacion());
                ByteArrayOutputStream obArray = new ByteArrayOutputStream();
                ObjectOutputStream objeto = new ObjectOutputStream(obArray);
                objeto.writeObject(new_size);
                byte[] dat = obArray.toByteArray();

                System.out.println("NEW SIZE" + dat.length + " ---- " + "SIZE ORIGINAL:" + size_act);
                if (dat.length <= size_act) {//Este if permite entrar si es mas peqeño
                    System.out.println("EL NUEVO REGISTRO ES MAS PEQUEÑO O IGUAL, SE ADAPATARA PARA QUE SEAN DEL MISMO TAMAÑO SI ES NECESARIO");
                    for (int i = 0; i < (size_act - dat.length); i++) {//El for lo que hace es meter caracteres para igualar los size de ambos
                        new_size.setSize_alter(new_size.getSize_alter() + "|");
                    }//Igualo los size para solo pegar el nuevo dato sobre el viejo y asi no generar errores
                    obArray = new ByteArrayOutputStream();
                    objeto = new ObjectOutputStream(obArray);
                    objeto.writeObject(new_size);
                    dat = obArray.toByteArray();//Actulizando 
                    RAfile.write(dat);
                    System.out.println("NEW SIZE" + dat.length + " ---- " + "SIZE ORIGINAL:" + size_act);
                } else {
                    System.out.println("EL NUEVO REGISTRO ES MUY GRANDE IRA AL FINAL DEL ARCHIVO");
                    temp.setSize_alter("*"); //Pone un aterisco que marca ese registro o dato como eliminado
                    obArray = new ByteArrayOutputStream();
                    objeto = new ObjectOutputStream(obArray);
                    objeto.writeObject(temp);
                    byte[] dat2 = obArray.toByteArray();
                    RAfile.write(dat2);

                    //ESPACIO RESERVADO PARA EL AVAILlIST
                    long byteOffset = RAfile.length();

                    new_size.setUbicacion(byteOffset);
                    obArray = new ByteArrayOutputStream();
                    objeto = new ObjectOutputStream(obArray);
                    objeto.writeObject(new_size);
                    dat = obArray.toByteArray();

                    RAfile.seek(byteOffset);//ahora nos vamos al final de archivo a poner el El registro ya que es muy grande
                    RAfile.writeInt(dat.length);
                    RAfile.write(dat);

                    Bnode tmp = metadata.getArbolB().search(temporal);
                    int ubicacion = searchEnNodo(tmp, temp.getKey());
                    tmp.key[ubicacion].byteOffset = byteOffset;

                    System.out.println("LLamar metodo del AvailList...");
                    AvailList.BestFit(size_act, temporal.byteOffset);
                    AvailList.ImprimeListaEnlazada(AvailList.head);
                    System.out.println("Antes de Borrar el Registro...." + metadata.ArbolB.search(temporal));
                    System.out.println("Despues de Borrar el Registro...." + metadata.ArbolB.search(temporal));
                    System.out.println("");

                    System.out.println("Key: " + tmp.key[ubicacion].key + " ------------------ ByteOfsset" + tmp.key[ubicacion].byteOffset);

                    //Espera implementarse mas adelante
                }
                System.out.println("OPERACION REALIZADA EXITOSAMENTE");
                System.out.println("===========================================================");
            }
        } catch (Exception ex) {
            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int searchEnNodo(Bnode d, int key) {//Como mi arbol devulve el nodo en que se ubica el Registro
        int pos = 0;
        //Este Metodo me dije la posicion en la que se encuentra en el Nodo.
        if (d != null) {
            for (int i = 0; i < d.n; i++) {//for que busca en el nodo la llave y le agrega el byte donde se ubica en el archivo
                if (d.key[i].getKey() == key) {
                    break;
                } else {
                    pos++;
                }
            }
        } else {
            // System.out.println("PORQUE ESSS NULLLLLL?????????????????????????????");
        }
        return pos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            // java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    DLL AvailList = new DLL();
    int num = 0; //
    Kenneth metodos = new Kenneth(); //Import Program Abilities developed by Kenneth
    Metadata metadata; //Global Variable for metadata handling. May be null sometimes.
    TableModel cleanTable; //Clean Table model for when program needs to return to original state.
    File file; // Global variable for binary file handling. May be null sometimes.
    ArrayList<Object> KennethExport2;
    int tablemodification = 0; //Int bandera , Table awareness for modification.
    Object oldcellvalue; // Old cell value that is being modified live on table. Might be null.
    int currentRow;
    RandomAccessFile RAfile;
    int currentColumn;
    int FileSuccess;
    int mode = -1;
    int rowRemoval;
    int developermode = 0;
    
    ArrayList<String> campo = new ArrayList();
    ArrayList<Integer> tipo = new ArrayList();
    
    //Control de llave, variable nueva
    boolean llave;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup bt_Tipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jb_AceptarRegistroString;
    private javax.swing.JButton jb_RegresarDeCrearCampo;
    private javax.swing.JButton jb_RegresarRegistroString;
    private javax.swing.JButton jb_TerminarCreacionCampo;
    private javax.swing.JButton jb_regresarBuscarregistro;
    private javax.swing.JButton jb_regresarInfoRegistro;
    private javax.swing.JDialog jd_BuscarRegistro;
    private javax.swing.JDialog jd_CrearCampo;
    private javax.swing.JDialog jd_CrearRegistroInt;
    private javax.swing.JDialog jd_CrearRegistroString;
    private javax.swing.JDialog jd_MostrarRegistro;
    private javax.swing.JSpinner jf_Integer;
    private javax.swing.JLabel jl_NombreCampoInt;
    private javax.swing.JLabel jl_nameCampo;
    private javax.swing.JLabel jl_nombreCampo;
    private javax.swing.JLabel jl_tipodevariable;
    private javax.swing.JSpinner js_key;
    private javax.swing.JTextField jt_RegistroString;
    private javax.swing.JRadioButton rb_tip_char;
    private javax.swing.JRadioButton rb_tip_integer;
    private javax.swing.JRadioButton rb_tip_long;
    private javax.swing.JRadioButton rb_tip_string;
    private javax.swing.JTextArea ta_infoRegistro;
    private javax.swing.JTextField tf_NombredelCampo;
    // End of variables declaration//GEN-END:variables
}
